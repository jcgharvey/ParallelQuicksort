package se751.team13.quicksort.paratask;

import se751.team13.quicksort.Sorter;

import java.util.ArrayList;
import java.util.List;

import paratask.runtime.ParaTask;
import paratask.runtime.TaskIDGroup;


public class ParataskQuickSorter<T extends Comparable<? super T>> implements Sorter<T> {
	
	private Integer granularity;
	private List<T> list;
	
	/**
	 * Default constructor, sets the number of threads used to the number of
	 * cores available.
	 */
	public ParataskQuickSorter(){
		this(Runtime.getRuntime().availableProcessors());
	}
	
	/**
	 * Constructor that takes the number of threads to use. Sets the granularity
	 * to default 250
	 * 
	 * @param numThreads
	 */
	public ParataskQuickSorter(int numThreads) {
		this(numThreads, 250);
	}
	
	/**
	 * Full Constructor that sets both the number of threads to use and the
	 * granularity level to go down to before performing sequential insertion
	 * sort.
	 * 
	 * @param numThreads
	 * @param granularity
	 */
	public ParataskQuickSorter(int numThreads, int granularity){
		ParaTask.setThreadPoolSize(numThreads);
		this.granularity = granularity;
	}	
	
	/**
	 * Method to sort an unsorted list using inplace quicksort Starts off the
	 * initial task to start parallel sections by creating an initial ParaTask
	 * Task and TaskGroup
	 * 
	 * @param unsorted
	 */
	public List<T> sort(List<T> unsorted) {
		list = new ArrayList<T>(unsorted); // don't override
		TaskID wholeList = run(0,list.size()-1);
		TaskIDGroup g = new TaskIDGroup(1);
		g.add(wholeList);
		try {
			g.waitTillFinished();		
		} catch (InterruptedException e){
			System.out.println("Interrupted");
		} catch (ExecutionException e){
			System.out.println("Execution");
			//pass
		}
		return list;
	}
	
	/**
	 * The Paratask Task simply calls the qssort method
	 * this is done to allow the qssort method to be called
	 * as both a task and as a method on an existing task. 
	 * 
	 * @param left
	 * @param right
	 */
	TASK public void run(int left, int right) {
		qssort(left, right);
	}
	
	/**
	 * Runs inplace quicksort implementation of the section of
	 * the list between the given left and right indices. 
	 * When calling the recursive part of the quicksort algorithm, 
	 * it keeps the right section of the list as its own, and creates
	 * a task for the left part of the list
	 * @param left
	 * @param right
	 */
	private void qssort(int left, int right){
		if (right - left <= granularity) {
			insertion(left, right);
		} else if (left < right) {
			int pivotIndex = left + (right - left) / 2;
			int pivotNewIndex = partition(left, right, pivotIndex);
			
			TaskIDGroup g = new TaskIDGroup(1);

			TaskID leftSubList = run( left, pivotNewIndex - 1);
			g.add(leftSubList);

			qssort(pivotNewIndex + 1, right);
			try {
				g.waitTillFinished();		
			} catch (InterruptedException e){
			
			} catch (ExecutionException e){
				//pass
			}
		}
	}
	
	/**
	 * Partition the array around a specified elements Swapping until all
	 * elements greater than the pivot are one side of the pivot and all
	 * elements smaller than the pivot are on the other side. Takes in a
	 * left and right index to indicate what section of the array it is
	 * working on.
	 * 
	 * @param leftIndex
	 * @param rightIndex
	 * @param pivotIndex
	 * @return
	 */
	private int partition(int leftIndex, int rightIndex,
			int pivotIndex) {

		T pivot = list.get(pivotIndex);
		swap(pivotIndex, rightIndex);
		int storeIndex = leftIndex;

		for (int i = leftIndex; i < rightIndex; i++) {
			T t = list.get(i);

			if (t.compareTo(pivot) <= 0) {
				swap(i, storeIndex);
				storeIndex++;
			}
		}

		swap(storeIndex, rightIndex);
		return storeIndex;
	}
	
	/**
	 * Swaps the elements at two positions
	 * 
	 * @param array
	 * @param leftIndex
	 * @param rightIndex
	 */
	private void swap(int leftIndex, int rightIndex) {
		T t = list.get(leftIndex);
		list.set(leftIndex, list.get(rightIndex));
		list.set(rightIndex, t);
	}
	
	/**
	 * Insertion sort a section
	 * 
	 * @param array
	 * @param offset
	 * @param limit
	 */
	private void insertion(int offset, int limit) {
		for (int i = offset; i < limit + 1; i++) {
			T valueToInsert = list.get(i);
			int hole = i;

			while (hole > 0
					&& valueToInsert.compareTo(list.get(hole - 1)) < 0) {
				list.set(hole, list.get(hole - 1));
				hole--;
			}

			list.set(hole, valueToInsert);
		}
	}

}