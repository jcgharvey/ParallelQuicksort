package se751.team13.quicksort.pyjama;

import se751.team13.quicksort.Sorter;

import java.util.ArrayList;

public class PyjamaQuickSorter<T extends Comparable<? super T>> implements
		Sorter<T> {

	private Integer numThreads;
	private Integer granularity;
	private List<T> list;

	/**
	 * Default constructor, sets the number of threads used to the number of
	 * cores available.
	 */
	public PyjamaQuickSorter() {
		this(Runtime.getRuntime().availableProcessors());
	}

	/**
	 * Constructor that takes the number of threads to use. Sets the granularity
	 * to default 250
	 * 
	 * @param numThreads
	 */
	public PyjamaQuickSorter(int numThreads) {
		this(numThreads, 250);
	}

	/**
	 * Full Constructor that sets both the number of threads to use and the
	 * granularity level to go down to before performing sequential insertion
	 * sort.
	 * 
	 * @param numThreads
	 * @param granularity
	 */
	public PyjamaQuickSorter(int numThreads, int granularity) {
		this.numThreads = numThreads;
		this.granularity = granularity;
	}

	/**
	 * Method to sort an unsorted list using inplace quicksort Starts off the
	 * initial task to start parallel sections.
	 * 
	 * @param unsorted
	 */
	@Override
	public List<T> sort(List<T> unsorted) {
		list = new ArrayList<T>(unsorted); // don't override
		qssort(0, list.size() - 1);
		return list;
	}

	/**
	 * Quicksort implementation, takes in the indices of the section of the
	 * array it is allowed to act on when the two sections are partitioned, the
	 * left section is passed to a new task while the right section is
	 * continued.
	 * 
	 * @param leftIndex
	 * @param rightIndex
	 */
	private void qssort(int left, int right) {
		// if the size that we are working on is less than the specified
		// granularity
		// then run insertion sort on this section
		if (right - left <= granularity) {
			insertion(left, right);
		} else if (left < right) {
			// find the index of the pivot we would like to use.
			// we pick the median index
			int pivotIndex = left + (right - left) / 2;
			int pivotNewIndex = partition(left, right, pivotIndex);
			// declare sections for our parallelism
			// #omp parallel sections num_threads(numThreads)
			{
				// #omp section
				{
					qssort(left, pivotNewIndex - 1);
				}

				// #omp section
				{
					qssort(pivotNewIndex + 1, right);
				}
			}

			// qssort(pivotNewIndex + 1, right);

		}
	}

	/**
	 * Partition the array around a specified elements Swapping until all
	 * elements greater than the pivot are one side of the pivot and all
	 * elements smaller than the pivot are on the other side. Takes in a left
	 * and right index to indicate what section of the array it is working on.
	 * 
	 * @param leftIndex
	 *            left side of the section
	 * @param rightIndex
	 *            right side of the section
	 * @param pivotIndex
	 *            index of pivot to partition on
	 */
	private int partition(int leftIndex, int rightIndex, int pivotIndex) {
		// get the pivot
		T pivot = list.get(pivotIndex);
		// move pivot to the end of the section
		swap(pivotIndex, rightIndex);
		// store the left index
		int storeIndex = leftIndex;

		// iterate over the section
		for (int i = leftIndex; i < rightIndex; i++) {
			T t = list.get(i);

			// compare this item with the pivot and swap if necessary
			if (t.compareTo(pivot) <= 0) {
				swap(i, storeIndex);
				storeIndex++;
			}
		}
		// swap the pivot back to where the leftIndex aka store index got up to
		swap(storeIndex, rightIndex);
		return storeIndex;
	}

	/**
	 * Swaps the elements at two positions
	 * 
	 * @param leftIndex
	 * @param rightIndex
	 */
	private void swap(int leftIndex, int rightIndex) {
		// temp
		T t = list.get(leftIndex);
		// set right to where left was
		list.set(leftIndex, list.get(rightIndex));
		// set the temp (left) to where right was
		list.set(rightIndex, t);
	}

	/**
	 * Insertion sort a section
	 * 
	 * @param offset
	 * @param limit
	 */
	private void insertion(int offset, int limit) {
		for (int i = offset; i < limit + 1; i++) {
			T valueToInsert = list.get(i);
			int hole = i;

			while (hole > 0 && valueToInsert.compareTo(list.get(hole - 1)) < 0) {
				list.set(hole, list.get(hole - 1));
				hole--;
			}

			list.set(hole, valueToInsert);
		}
	}

}