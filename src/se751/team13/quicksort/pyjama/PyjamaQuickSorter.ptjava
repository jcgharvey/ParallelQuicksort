package se751.team13.quicksort.pyjama;//#GEN#[1]#PJ#
//#GEN#[1]#PJ#
import jump.parser.ast.visitor.DummyClassToDetermineVariableType;//#GEN#[1]#PJ#
import paratask.runtime.*;//#GEN#[1]#PJ#
import java_omp.Pyjama;//#GEN#[1]#PJ#
import java_omp.JuMP_PackageOnly;//#GEN#[1]#PJ#
import java_omp.UniqueThreadIdGeneratorForOpenMP;//#GEN#[1]#PJ#
import pi.ParIteratorFactory;//#GEN#[1]#PJ#
import pi.ParIterator;//#GEN#[1]#PJ#
import pi.reductions.Reducible;//#GEN#[1]#PJ#
import pi.reductions.Reduction;//#GEN#[1]#PJ#
import java.util.concurrent.atomic.*;//#GEN#[1]#PJ#
import java.util.concurrent.*;//#GEN#[1]#PJ#
import java.awt.EventQueue;//#GEN#[1]#PJ#
import java.util.concurrent.ExecutorService;//#GEN#[1]#PJ#
import java.util.concurrent.Executors;//#GEN#[1]#PJ#
import java.util.concurrent.TimeUnit;//#GEN#[1]#PJ#
import javax.swing.SwingUtilities;//#GEN#[1]#PJ#
import jump.parser.ast.visitor.DummyClassToDetermineVariableType;//#GEN#[3]#PJ#
import se751.team13.quicksort.Sorter;//#GEN#[4]#PJ#
import java.util.ArrayList;//#GEN#[5]#PJ#
import java.util.List;//#GEN#[6]#PJ#
//#GEN#[6]#PJ#
import pi.reductions.Reducible;//#GEN#[6]#PJ#
import java.util.*;//#GEN#[6]#PJ#
//#GEN#[6]#PJ#
public class PyjamaQuickSorter<T extends Comparable<? super T>> implements Sorter<T> {//#GEN#[8]#PJ#
    private Integer granularity;private List<T> list;public PyjamaQuickSorter() {//#GEN#[11]#PJ#
        this(200);//#GEN#[12]#PJ#
    }public PyjamaQuickSorter(int granularity) {//#GEN#[14]#PJ#
        this.granularity = granularity;//#GEN#[15]#PJ#
    }@Override //#GEN#[16]#PJ#
    public List<T> sort(List<T> unsorted) {{//#GEN#[18]#PJ#
        list = new ArrayList<T>(unsorted);//#GEN#[19]#PJ#
        qssort(0, list.size() - 1);//#GEN#[20]#PJ#
        return list;//#GEN#[21]#PJ#
    }
    }
    static private ArrayList<ParIterator<?>> _omp_piVarContainer = new ArrayList<ParIterator<?>>();//#GEN#[-1]#PJ#
static private AtomicBoolean _holderForPIFirst;//#GEN#[-1]#PJ#

    private void qssort(int left, int right) {{//#GEN#[23]#PJ#
        if (right - left <= granularity) //#GEN#[24]#PJ#
        {//#GEN#[24]#PJ#
            insertion(left, right);//#GEN#[25]#PJ#
        } else if (left < right) //#GEN#[26]#PJ#
        {//#GEN#[26]#PJ#
            int pivotIndex = left + (right - left) / 2;//#GEN#[27]#PJ#
            int pivotNewIndex = partition(left, right, pivotIndex);//#GEN#[28]#PJ#
            /*OpenMP Parallel region (#0) -- START *///#GEN#[29]#PJ#
            if(Pyjama.insideParallelRegion() ) {//#GEN#[29]#PJ#
                /* If already inside a parallel region, execute sequentially (nested parallelism currently not supported) *///#GEN#[29]#PJ#
                {//#GEN#[30]#PJ#
                    for (int _omp_i_0 = 0; _omp_i_0 < 2; _omp_i_0 = _omp_i_0+1) //#GEN#[32]#PJ#
                    {//#GEN#[32]#PJ#
                        switch(_omp_i_0) {//#GEN#[33]#PJ#
                            case 0://#GEN#[33]#PJ#
                                {//#GEN#[35]#PJ#
                                    qssort(left, pivotNewIndex - 1);//#GEN#[36]#PJ#
                                }//#GEN#[37]#PJ#
                                break;//#GEN#[38]#PJ#
                            case 1://#GEN#[38]#PJ#
                                {//#GEN#[40]#PJ#
                                    qssort(pivotNewIndex + 1, right);//#GEN#[41]#PJ#
                                }//#GEN#[42]#PJ#
                                break;//#GEN#[43]#PJ#
                        }//#GEN#[43]#PJ#
                    }//#GEN#[45]#PJ#
                }//#GEN#[46]#PJ#
            } else {//#GEN#[29]#PJ#
                /* Else, execute in parallel *///#GEN#[29]#PJ#
                JuMP_PackageOnly.setThreadCountCurrentParallelRegion(Pyjama.omp_get_num_threads());//#GEN#[29]#PJ#
//#GEN#[29]#PJ#
                /* Process data clauses *///#GEN#[29]#PJ#
                _omp__parallelRegionVarHolderClass_PyjamaQuickSorter0 _omp__parallelRegionVarHolderInstance_0 = new _omp__parallelRegionVarHolderClass_PyjamaQuickSorter0();//#GEN#[29]#PJ#
                _omp__parallelRegionVarHolderInstance_0.pivotIndex = pivotIndex; // auto-saving//#GEN#[29]#PJ#
                _omp__parallelRegionVarHolderInstance_0.left = left; // auto-saving//#GEN#[29]#PJ#
                _omp__parallelRegionVarHolderInstance_0.right = right; // auto-saving//#GEN#[29]#PJ#
                _omp__parallelRegionVarHolderInstance_0.pivotNewIndex = pivotNewIndex; // auto-saving//#GEN#[29]#PJ#
//#GEN#[29]#PJ#
                /* Execute using traditional OpenMP (master thread part of the team) *///#GEN#[29]#PJ#
                JuMP_PackageOnly.setMasterThread(Thread.currentThread());//#GEN#[29]#PJ#
                TaskID _omp__parallelRegionTaskID_0 = _ompParallelRegion_0(_omp__parallelRegionVarHolderInstance_0);//#GEN#[29]#PJ#
                __pt___ompParallelRegion_0(_omp__parallelRegionVarHolderInstance_0);//#GEN#[29]#PJ#
                try {_omp__parallelRegionTaskID_0.waitTillFinished();} catch(Exception __pt__ex) { __pt__ex.printStackTrace(); }//#GEN#[29]#PJ#
                //#GEN#[29]#PJ#
                JuMP_PackageOnly.setMasterThread(null);//#GEN#[29]#PJ#
                _holderForPIFirst.set(true);//#GEN#[29]#PJ#

                pivotIndex=_omp__parallelRegionVarHolderInstance_0.pivotIndex; // auto-saved
                left=_omp__parallelRegionVarHolderInstance_0.left; // auto-saved
                right=_omp__parallelRegionVarHolderInstance_0.right; // auto-saved
                pivotNewIndex=_omp__parallelRegionVarHolderInstance_0.pivotNewIndex; // auto-saved
                JuMP_PackageOnly.setThreadCountCurrentParallelRegion(1);//#GEN#[29]#PJ#
            }//#GEN#[29]#PJ#
            /*OpenMP Parallel region (#0) -- END *///#GEN#[29]#PJ#
//#GEN#[29]#PJ#
        }//#GEN#[47]#PJ#
    }
    }
        private AtomicBoolean _imFirst_2 = new AtomicBoolean(true);//#GEN#[-1]#PJ#
    private AtomicInteger _imFinishedCounter_2 = new AtomicInteger(0);//#GEN#[-1]#PJ#
    private CountDownLatch _waitBarrier_2 = new CountDownLatch(1);//#GEN#[-1]#PJ#
    private CountDownLatch _waitBarrierAfter_2 = new CountDownLatch(1);//#GEN#[-1]#PJ#
    private ParIterator<Integer> _pi_2 = null;//#GEN#[-1]#PJ#
    private Integer _lastElement_2 = null;//#GEN#[-1]#PJ#
    private _ompWorkSharedUserCode_PyjamaQuickSorter2_variables _ompWorkSharedUserCode_PyjamaQuickSorter2_variables_instance = null;//#GEN#[-1]#PJ#
        private void _ompWorkSharedUserCode_PyjamaQuickSorter2(_ompWorkSharedUserCode_PyjamaQuickSorter2_variables __omp_vars) {//#GEN#[-1]#PJ#

        int pivotIndex = __omp_vars.pivotIndex; // Auto-saved
        int left = __omp_vars.left; // Auto-saved
        int right = __omp_vars.right; // Auto-saved
        int pivotNewIndex = __omp_vars.pivotNewIndex; // Auto-saved
        Integer _omp_i_0;//#GEN#[-1]#PJ#
        while (_pi_2.hasNext()) {//#GEN#[-1]#PJ#
            _omp_i_0 = _pi_2.next();//#GEN#[-1]#PJ#
            //#GEN#[-1]#PJ#
            {//#GEN#[32]#PJ#
                switch(_omp_i_0) {//#GEN#[33]#PJ#
                    case 0://#GEN#[33]#PJ#
                        {//#GEN#[35]#PJ#
                            qssort(left, pivotNewIndex - 1);//#GEN#[36]#PJ#
                        }//#GEN#[37]#PJ#
                        break;//#GEN#[38]#PJ#
                    case 1://#GEN#[38]#PJ#
                        {//#GEN#[40]#PJ#
                            qssort(pivotNewIndex + 1, right);//#GEN#[41]#PJ#
                        }//#GEN#[42]#PJ#
                        break;//#GEN#[43]#PJ#
                }//#GEN#[43]#PJ#
            }//#GEN#[-1]#PJ#
        }//#GEN#[-1]#PJ#

    __omp_vars.pivotIndex = pivotIndex; // Re-collected
    __omp_vars.left = left; // Re-collected
    __omp_vars.right = right; // Re-collected
    __omp_vars.pivotNewIndex = pivotNewIndex; // Re-collected
    }//#GEN#[-1]#PJ#
    //#GEN#[-1]#PJ#
    //#GEN#[-1]#PJ#
    /* Parallel region, placed in a multi-task *///#GEN#[-1]#PJ#
    TASK(Pyjama.omp_get_num_threads()-1) private void _ompParallelRegion_0(_omp__parallelRegionVarHolderClass_PyjamaQuickSorter0 __omp_vars) {//#GEN#[-1]#PJ#

        int pivotIndex = __omp_vars.pivotIndex; // Auto-saved
        int left = __omp_vars.left; // Auto-saved
        int right = __omp_vars.right; // Auto-saved
        int pivotNewIndex = __omp_vars.pivotNewIndex; // Auto-saved
        {//#GEN#[30]#PJ#
            if ( Pyjama.insideParallelRegion() ) {//#GEN#[31]#PJ#
                /* Share the following work-sharing construct amongst multiple threads only if inside a parallel region (need this check for orphaned work-sharing constructs) *///#GEN#[31]#PJ#
                boolean _omp_imFirst = _imFirst_2.getAndSet(false);//#GEN#[31]#PJ#
                _holderForPIFirst = _imFirst_2;//#GEN#[31]#PJ#
                if (_omp_imFirst) {//#GEN#[31]#PJ#
                    _ompWorkSharedUserCode_PyjamaQuickSorter2_variables_instance = new _ompWorkSharedUserCode_PyjamaQuickSorter2_variables();//#GEN#[31]#PJ#
                    int __omp_size_ = 0;//#GEN#[31]#PJ#
                    // TODO -- improve performance by calculating N from the parameters (as an equation) rather than looping//#GEN#[31]#PJ#
                    for (int _omp_i_0 = 0; _omp_i_0 < 2; _omp_i_0 = _omp_i_0+1) {//#GEN#[31]#PJ#
                        _lastElement_2 = _omp_i_0;//#GEN#[31]#PJ#
                        __omp_size_++;//#GEN#[31]#PJ#
                        }//#GEN#[31]#PJ#
                    _pi_2 = ParIteratorFactory.createParIterator(0, __omp_size_, 1, Pyjama.omp_get_num_threads(), ParIterator.Schedule.DYNAMIC, 1, false);//#GEN#[31]#PJ#
                    _omp_piVarContainer.add(_pi_2); // for interrupt statement//#GEN#[31]#PJ#
                    _pi_2.setThreadIdGenerator(new UniqueThreadIdGeneratorForOpenMP());
                    _ompWorkSharedUserCode_PyjamaQuickSorter2_variables_instance.pivotIndex = pivotIndex; // auto-saving//#GEN#[31]#PJ#
                    _ompWorkSharedUserCode_PyjamaQuickSorter2_variables_instance.left = left; // auto-saving//#GEN#[31]#PJ#
                    _ompWorkSharedUserCode_PyjamaQuickSorter2_variables_instance.right = right; // auto-saving//#GEN#[31]#PJ#
                    _ompWorkSharedUserCode_PyjamaQuickSorter2_variables_instance.pivotNewIndex = pivotNewIndex; // auto-saving//#GEN#[31]#PJ#
                    _waitBarrier_2.countDown();//#GEN#[31]#PJ#
                } else {//#GEN#[31]#PJ#
                    try { _waitBarrier_2.await(); } catch (InterruptedException __omp__ie) { __omp__ie.printStackTrace(); }//#GEN#[31]#PJ#
                }//#GEN#[31]#PJ#
                _ompWorkSharedUserCode_PyjamaQuickSorter2(_ompWorkSharedUserCode_PyjamaQuickSorter2_variables_instance);//#GEN#[31]#PJ#
                if (_imFinishedCounter_2.incrementAndGet() == JuMP_PackageOnly.getThreadCountCurrentParallelRegion()) {//#GEN#[31]#PJ#
                    _waitBarrierAfter_2.countDown();//#GEN#[31]#PJ#
                } else {//#GEN#[31]#PJ#
                    try { //#GEN#[31]#PJ#
                        _waitBarrierAfter_2.await();//#GEN#[31]#PJ#
                    } catch (InterruptedException __omp__ie) { //#GEN#[31]#PJ#
                        __omp__ie.printStackTrace(); //#GEN#[31]#PJ#
                    }//#GEN#[31]#PJ#
                }//#GEN#[31]#PJ#

            } else {//#GEN#[31]#PJ#
                /* Otherwise, this orphaned work-sharing is not within a parallel region.. so execute sequentially *///#GEN#[31]#PJ#
                for (int _omp_i_0 = 0; _omp_i_0 < 2; _omp_i_0 = _omp_i_0+1) //#GEN#[32]#PJ#
                {//#GEN#[32]#PJ#
                    switch(_omp_i_0) {//#GEN#[33]#PJ#
                        case 0://#GEN#[33]#PJ#
                            {//#GEN#[35]#PJ#
                                qssort(__omp_vars.left, __omp_vars.pivotNewIndex - 1);//#GEN#[36]#PJ#
                            }//#GEN#[37]#PJ#
                            break;//#GEN#[38]#PJ#
                        case 1://#GEN#[38]#PJ#
                            {//#GEN#[40]#PJ#
                                qssort(__omp_vars.pivotNewIndex + 1, __omp_vars.right);//#GEN#[41]#PJ#
                            }//#GEN#[42]#PJ#
                            break;//#GEN#[43]#PJ#
                    }//#GEN#[43]#PJ#
                }//#GEN#[45]#PJ#
            }//#GEN#[45]#PJ#
//#GEN#[45]#PJ#
        }//#GEN#[46]#PJ#

        __omp_vars.pivotIndex = pivotIndex; // restore auto-saved variable
        __omp_vars.left = left; // restore auto-saved variable
        __omp_vars.right = right; // restore auto-saved variable
        __omp_vars.pivotNewIndex = pivotNewIndex; // restore auto-saved variable
    }
    private int partition(int leftIndex, int rightIndex, int pivotIndex) {{//#GEN#[49]#PJ#
        T pivot = list.get(pivotIndex);//#GEN#[50]#PJ#
        swap(pivotIndex, rightIndex);//#GEN#[51]#PJ#
        int storeIndex = leftIndex;//#GEN#[52]#PJ#
        for (int i = leftIndex; i < rightIndex; i++) //#GEN#[53]#PJ#
        {//#GEN#[53]#PJ#
            T t = list.get(i);//#GEN#[54]#PJ#
            if (t.compareTo(pivot) <= 0) //#GEN#[55]#PJ#
            {//#GEN#[55]#PJ#
                swap(i, storeIndex);//#GEN#[56]#PJ#
                storeIndex++;//#GEN#[57]#PJ#
            }//#GEN#[58]#PJ#
        }//#GEN#[59]#PJ#
        swap(storeIndex, rightIndex);//#GEN#[60]#PJ#
        return storeIndex;//#GEN#[61]#PJ#
    }
    }
    
    private void swap(int leftIndex, int rightIndex) {{//#GEN#[63]#PJ#
        T t = list.get(leftIndex);//#GEN#[64]#PJ#
        list.set(leftIndex, list.get(rightIndex));//#GEN#[65]#PJ#
        list.set(rightIndex, t);//#GEN#[66]#PJ#
    }
    }
    
    private void insertion(int offset, int limit) {{//#GEN#[68]#PJ#
        for (int i = offset; i < limit + 1; i++) //#GEN#[69]#PJ#
        {//#GEN#[69]#PJ#
            T valueToInsert = list.get(i);//#GEN#[70]#PJ#
            int hole = i;//#GEN#[71]#PJ#
            while (hole > 0 && valueToInsert.compareTo(list.get(hole - 1)) < 0) //#GEN#[72]#PJ#
            {//#GEN#[72]#PJ#
                list.set(hole, list.get(hole - 1));//#GEN#[73]#PJ#
                hole--;//#GEN#[74]#PJ#
            }//#GEN#[75]#PJ#
            list.set(hole, valueToInsert);//#GEN#[76]#PJ#
        }//#GEN#[77]#PJ#
    }
    }
    
}//#GEN#[78]#PJ#
